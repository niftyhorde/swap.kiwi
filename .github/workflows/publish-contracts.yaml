name: Release Contracts

on:
  push:
    branches:
      - 'master'

jobs:
  tag:
    name: Check and Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create tag
        id: tag
        uses: butlerlogic/action-autotag@1.1.1
        with:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          strategy: package # Optional, since "package" is the default strategy
          tag_prefix: "v"
    outputs:
      tag: ${{ steps.tag.outputs.tagname }}

  release-contracts:
    name: Release Contracts
    runs-on: ubuntu-latest
    needs: tag
    if: needs.tag.outputs.tag != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Nodejs
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          always-auth: true
          registry-url: 'https://npm.pkg.github.com'
          scope: '@niftyhorde'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive --ignore-optional
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Prepare env
        run: yarn run prepare

      - name: Build packages
        run: yarn run build

      - name: Compile contracts
        run: yarn run compile

      - name: Deploy goerli
        run: yarn run deploy:goerli
        env:
          INFURA_PROJECT_ID: ${{ secrets.INFURA_PROJECT_ID }}
          GOERLI_MNEMONIC: ${{ secrets.GOERLI_MNEMONIC }}
      - name: Deploy mainnet
        run: yarn run deploy:mainnet
        if: ${{ !contains(needs.tag.outputs.tag, 'beta') }}
        env:
          INFURA_PROJECT_ID: ${{ secrets.INFURA_PROJECT_ID }}
          MAINNET_MNEMONIC: ${{ secrets.MAINNET_MNEMONIC }}
      - name: Combine deployments
        run: npx hardhat deploy --export-all "./deployments/deployments.json"
      - name: Publish to github package registry
        run: yarn publish --ignore-scripts --no-git-tag-version --no-commit-hooks --non-interactive
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.tag.outputs.tag }}
          release_name: Release ${{ needs.tag.outputs.tag }}
      #in case of failure
      - name: Rollback on failure
        if: failure()
        uses: author/action-rollback@9ec72a6af74774e00343c6de3e946b0901c23013
        with:
          id: ${{ steps.create_release.outputs.id }}
          tag: ${{ needs.tag.outputs.tag }}
          delete_orphan_tag: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Release Docker image
    runs-on: ubuntu-latest
    needs: tag
    if: needs.tag.outputs.tag != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Push docker image to GitHub Packages
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.CR_WRITE_PAT }}
          registry: ghcr.io
          repository: niftyhorde/swap.kiwi
          tags: latest,${{ needs.tag.outputs.tag }}
          push: true

      - name: Rollback on failure
        if: failure()
        uses: author/action-rollback@9ec72a6af74774e00343c6de3e946b0901c23013
        with:
          id: ${{ steps.create_release.outputs.id }}
          tag: ${{ needs.tag.outputs.tag }}
          delete_orphan_tag: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
